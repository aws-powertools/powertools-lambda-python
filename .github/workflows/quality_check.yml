name: Code quality

# PROCESS
#
# 1. Install all dependencies and spin off containers for all supported Python versions
# 2. Run code formatters and linters (various checks) for code standard
# 3. Run static typing checker for potential bugs
# 4. Run entire test suite for regressions except end-to-end (unit, functional, performance)
# 5. Run static analysis (in addition to CodeQL) for common insecure code practices
# 6. Run complexity baseline to avoid error-prone bugs and keep maintenance lower
# 7. Collect and report on test coverage

# USAGE
#
# Always triggered on new PRs, PR changes and PR merge.


on:
  pull_request:
    paths:
      - "aws_lambda_powertools/**"
      - "tests/**"
      - "pyproject.toml"
      - "poetry.lock"
      - "mypy.ini"
    branches:
      - develop
      - v3
  push:
    paths:
      - "aws_lambda_powertools/**"
      - "tests/**"
      - "pyproject.toml"
      - "poetry.lock"
      - "mypy.ini"
    branches:
      - develop
      - v3

permissions:
  contents: read

jobs:
  quality_check:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    env:
      PYTHON: "${{ matrix.python-version }}"
    permissions:
      contents: read  # checkout code only
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
      - name: Install poetry
        run: pipx install poetry
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"
      - name: Install dependencies
        run: make dev
      - name: Formatting and Linting
        run: make lint
      - name: Static type checking
        run: make mypy
      - name: Test with pytest
        run: make test
      - name: Test dependencies with Nox
        run: make test-dependencies
      - name: Security baseline
        run: make security-baseline
      - name: Complexity baseline
        run: make complexity-baseline
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@b9fd7d16f6d7d1b5d2bec1a2887e65ceed900238 # 4.6.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          env_vars: PYTHON
          name: aws-lambda-powertools-python-codecov
